{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\nimport { ArrowPathIcon, MapPinIcon } from '@heroicons/vue/24/outline';\nimport L from 'leaflet';\nimport api from '../../services/api';\nimport { useToast } from 'vue-toastification';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport io from 'socket.io-client';\nexport default {\n  __name: 'Mapa',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const toast = useToast();\n    const map = ref(null);\n    const socket = ref(null);\n    const autoRefresh = ref(true);\n    const showRoutes = ref(false);\n    const selectedUser = ref('');\n    const selectedVehicle = ref('');\n    const locations = ref([]);\n    const users = ref([]);\n    const vehicles = ref([]);\n    const markers = ref(new Map());\n    const routes = ref(new Map());\n    const filteredLocations = computed(() => {\n      return locations.value.filter(location => {\n        const matchesUser = !selectedUser.value || location.vehiculo?.asignacion_actual?.usuario_id == selectedUser.value;\n        const matchesVehicle = !selectedVehicle.value || location.vehiculo_id == selectedVehicle.value;\n        return matchesUser && matchesVehicle;\n      });\n    });\n    const initMap = () => {\n      map.value = L.map('map').setView([19.432608, -99.133209], 10);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(map.value);\n    };\n    const initSocket = () => {\n      socket.value = io(import.meta.env.VITE_API_URL || 'http://localhost:8080');\n      socket.value.on('location-update', data => {\n        updateVehicleLocation(data);\n      });\n      socket.value.on('connect', () => {\n        console.log('Conectado al servidor de ubicaciones');\n      });\n      socket.value.on('disconnect', () => {\n        console.log('Desconectado del servidor de ubicaciones');\n      });\n    };\n    const fetchData = async () => {\n      try {\n        const [locationsRes, usersRes, vehiclesRes] = await Promise.all([api.get('/ubicaciones/latest'), api.get('/usuarios?rol=usuario&activo=true'), api.get('/vehiculos?estado=asignado')]);\n        locations.value = locationsRes.data.data;\n        users.value = usersRes.data.data;\n        vehicles.value = vehiclesRes.data.data;\n        updateMapMarkers();\n      } catch (error) {\n        toast.error('Error al cargar las ubicaciones');\n      }\n    };\n    const updateMapMarkers = () => {\n      // Limpiar marcadores existentes\n      markers.value.forEach(marker => {\n        map.value.removeLayer(marker);\n      });\n      markers.value.clear();\n\n      // Agregar nuevos marcadores\n      filteredLocations.value.forEach(location => {\n        const marker = L.marker([location.latitud, location.longitud]).bindPopup(`\n        <div class=\"p-2\">\n          <h3 class=\"font-bold\">${location.vehiculo?.matricula}</h3>\n          <p>${location.vehiculo?.marca?.nombre} ${location.vehiculo?.modelo}</p>\n          <p><strong>Usuario:</strong> ${location.vehiculo?.asignacion_actual?.usuario_nombre || 'Sin asignar'}</p>\n          <p><strong>Velocidad:</strong> ${location.velocidad} km/h</p>\n          <p><strong>Dirección:</strong> ${location.direccion}°</p>\n          <p><strong>Actualizado:</strong> ${formatDate(location.timestamp_gps)}</p>\n        </div>\n      `).addTo(map.value);\n        markers.value.set(location.vehiculo_id, marker);\n      });\n    };\n    const updateVehicleLocation = locationData => {\n      // Actualizar en la lista de ubicaciones\n      const index = locations.value.findIndex(loc => loc.vehiculo_id === locationData.vehiculo_id);\n      if (index !== -1) {\n        locations.value[index] = locationData;\n      } else {\n        locations.value.push(locationData);\n      }\n\n      // Actualizar marcador en el mapa\n      const marker = markers.value.get(locationData.vehiculo_id);\n      if (marker) {\n        marker.setLatLng([locationData.latitud, locationData.longitud]);\n        marker.getPopup().setContent(`\n      <div class=\"p-2\">\n        <h3 class=\"font-bold\">${locationData.vehiculo?.matricula}</h3>\n        <p>${locationData.vehiculo?.marca?.nombre} ${locationData.vehiculo?.modelo}</p>\n        <p><strong>Usuario:</strong> ${locationData.vehiculo?.asignacion_actual?.usuario_nombre || 'Sin asignar'}</p>\n        <p><strong>Velocidad:</strong> ${locationData.velocidad} km/h</p>\n        <p><strong>Dirección:</strong> ${locationData.direccion}°</p>\n        <p><strong>Actualizado:</strong> ${formatDate(locationData.timestamp_gps)}</p>\n      </div>\n    `);\n      }\n    };\n    const refreshLocations = async () => {\n      await fetchData();\n      toast.success('Ubicaciones actualizadas');\n    };\n    const toggleAutoRefresh = () => {\n      autoRefresh.value = !autoRefresh.value;\n      if (autoRefresh.value) {\n        toast.success('Auto-actualización activada');\n      } else {\n        toast.info('Auto-actualización desactivada');\n      }\n    };\n    const filterVehicles = () => {\n      updateMapMarkers();\n    };\n    const focusVehicle = location => {\n      map.value.setView([location.latitud, location.longitud], 15);\n      const marker = markers.value.get(location.vehiculo_id);\n      if (marker) {\n        marker.openPopup();\n      }\n    };\n    const centerMap = () => {\n      if (filteredLocations.value.length > 0) {\n        const group = new L.featureGroup(Array.from(markers.value.values()));\n        map.value.fitBounds(group.getBounds().pad(0.1));\n      } else {\n        map.value.setView([19.432608, -99.133209], 10);\n      }\n    };\n    const getSpeedClass = speed => {\n      if (speed === 0) return 'bg-gray-100 text-gray-800';\n      if (speed <= 30) return 'bg-green-100 text-green-800';\n      if (speed <= 60) return 'bg-yellow-100 text-yellow-800';\n      return 'bg-red-100 text-red-800';\n    };\n    const formatDate = date => {\n      return format(new Date(date), 'dd/MM/yyyy HH:mm:ss', {\n        locale: es\n      });\n    };\n    onMounted(async () => {\n      initMap();\n      initSocket();\n      await fetchData();\n    });\n    onUnmounted(() => {\n      if (socket.value) {\n        socket.value.disconnect();\n      }\n    });\n    const __returned__ = {\n      toast,\n      map,\n      socket,\n      autoRefresh,\n      showRoutes,\n      selectedUser,\n      selectedVehicle,\n      locations,\n      users,\n      vehicles,\n      markers,\n      routes,\n      filteredLocations,\n      initMap,\n      initSocket,\n      fetchData,\n      updateMapMarkers,\n      updateVehicleLocation,\n      refreshLocations,\n      toggleAutoRefresh,\n      filterVehicles,\n      focusVehicle,\n      centerMap,\n      getSpeedClass,\n      formatDate,\n      ref,\n      onMounted,\n      onUnmounted,\n      computed,\n      get ArrowPathIcon() {\n        return ArrowPathIcon;\n      },\n      get MapPinIcon() {\n        return MapPinIcon;\n      },\n      get L() {\n        return L;\n      },\n      get api() {\n        return api;\n      },\n      get useToast() {\n        return useToast;\n      },\n      get format() {\n        return format;\n      },\n      get es() {\n        return es;\n      },\n      get io() {\n        return io;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","computed","ArrowPathIcon","MapPinIcon","L","api","useToast","format","es","io","toast","map","socket","autoRefresh","showRoutes","selectedUser","selectedVehicle","locations","users","vehicles","markers","Map","routes","filteredLocations","value","filter","location","matchesUser","vehiculo","asignacion_actual","usuario_id","matchesVehicle","vehiculo_id","initMap","setView","tileLayer","attribution","addTo","initSocket","import","meta","env","VITE_API_URL","on","data","updateVehicleLocation","console","log","fetchData","locationsRes","usersRes","vehiclesRes","Promise","all","get","updateMapMarkers","error","forEach","marker","removeLayer","clear","latitud","longitud","bindPopup","matricula","marca","nombre","modelo","usuario_nombre","velocidad","direccion","formatDate","timestamp_gps","set","locationData","index","findIndex","loc","push","setLatLng","getPopup","setContent","refreshLocations","success","toggleAutoRefresh","info","filterVehicles","focusVehicle","openPopup","centerMap","length","group","featureGroup","Array","from","values","fitBounds","getBounds","pad","getSpeedClass","speed","date","Date","locale","disconnect"],"sources":["C:/Users/MG/Documents/Proyecto/Proyecto 2/frontend/src/views/admin/Mapa.vue"],"sourcesContent":["<template>\n  <div class=\"space-y-6\">\n    <!-- Header -->\n    <div class=\"md:flex md:items-center md:justify-between\">\n      <div class=\"min-w-0 flex-1\">\n        <h2 class=\"text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight\">\n          Mapa GPS - Todas las Ubicaciones\n        </h2>\n      </div>\n      <div class=\"mt-4 flex md:mt-0 space-x-2\">\n        <button\n          @click=\"toggleAutoRefresh\"\n          :class=\"[\n            'inline-flex items-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm',\n            autoRefresh \n              ? 'bg-green-600 text-white hover:bg-green-700' \n              : 'bg-gray-600 text-white hover:bg-gray-700'\n          ]\"\n        >\n          <ArrowPathIcon class=\"-ml-0.5 mr-1.5 h-5 w-5\" :class=\"{ 'animate-spin': autoRefresh }\" />\n          {{ autoRefresh ? 'Auto-actualización ON' : 'Auto-actualización OFF' }}\n        </button>\n        <button\n          @click=\"refreshLocations\"\n          class=\"inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-700\"\n        >\n          <MapPinIcon class=\"-ml-0.5 mr-1.5 h-5 w-5\" />\n          Actualizar Ubicaciones\n        </button>\n      </div>\n    </div>\n\n    <!-- Map Controls -->\n    <div class=\"bg-white shadow rounded-lg p-4\">\n      <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">Filtrar por Usuario</label>\n          <select\n            v-model=\"selectedUser\"\n            @change=\"filterVehicles\"\n            class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n          >\n            <option value=\"\">Todos los usuarios</option>\n            <option v-for=\"user in users\" :key=\"user.id\" :value=\"user.id\">\n              {{ user.nombre }} {{ user.apellido }}\n            </option>\n          </select>\n        </div>\n        <div>\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">Filtrar por Vehículo</label>\n          <select\n            v-model=\"selectedVehicle\"\n            @change=\"filterVehicles\"\n            class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n          >\n            <option value=\"\">Todos los vehículos</option>\n            <option v-for=\"vehicle in vehicles\" :key=\"vehicle.id\" :value=\"vehicle.id\">\n              {{ vehicle.matricula }} - {{ vehicle.modelo }}\n            </option>\n          </select>\n        </div>\n        <div>\n          <label class=\"block text-sm font-medium text-gray-700 mb-1\">Mostrar Rutas</label>\n          <div class=\"flex items-center\">\n            <input\n              id=\"show-routes\"\n              v-model=\"showRoutes\"\n              type=\"checkbox\"\n              class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label for=\"show-routes\" class=\"ml-2 block text-sm text-gray-900\">\n              Mostrar trayectorias\n            </label>\n          </div>\n        </div>\n        <div class=\"flex items-end\">\n          <button\n            @click=\"centerMap\"\n            class=\"w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50\"\n          >\n            Centrar Mapa\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Map Container -->\n    <div class=\"bg-white shadow rounded-lg overflow-hidden\">\n      <div id=\"map\" class=\"h-96 lg:h-[600px] w-full\"></div>\n    </div>\n\n    <!-- Vehicle List -->\n    <div class=\"bg-white shadow rounded-lg\">\n      <div class=\"px-4 py-5 sm:p-6\">\n        <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Vehículos en Tiempo Real</h3>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div\n            v-for=\"location in filteredLocations\"\n            :key=\"location.vehiculo_id\"\n            class=\"border rounded-lg p-4 hover:bg-gray-50 cursor-pointer\"\n            @click=\"focusVehicle(location)\"\n          >\n            <div class=\"flex items-center justify-between mb-2\">\n              <h4 class=\"font-medium text-gray-900\">{{ location.vehiculo?.matricula }}</h4>\n              <span\n                class=\"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium\"\n                :class=\"getSpeedClass(location.velocidad)\"\n              >\n                {{ location.velocidad }} km/h\n              </span>\n            </div>\n            <p class=\"text-sm text-gray-600 mb-1\">\n              {{ location.vehiculo?.marca?.nombre }} {{ location.vehiculo?.modelo }}\n            </p>\n            <p class=\"text-sm text-gray-600 mb-2\">\n              <strong>Usuario:</strong> {{ location.vehiculo?.asignacion_actual?.usuario_nombre || 'Sin asignar' }}\n            </p>\n            <div class=\"text-xs text-gray-500\">\n              <p><strong>Lat:</strong> {{ location.latitud.toFixed(6) }}</p>\n              <p><strong>Lng:</strong> {{ location.longitud.toFixed(6) }}</p>\n              <p><strong>Última actualización:</strong> {{ formatDate(location.timestamp_gps) }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted, computed } from 'vue'\nimport { ArrowPathIcon, MapPinIcon } from '@heroicons/vue/24/outline'\nimport L from 'leaflet'\nimport api from '../../services/api'\nimport { useToast } from 'vue-toastification'\nimport { format } from 'date-fns'\nimport { es } from 'date-fns/locale'\nimport io from 'socket.io-client'\n\nconst toast = useToast()\n\nconst map = ref(null)\nconst socket = ref(null)\nconst autoRefresh = ref(true)\nconst showRoutes = ref(false)\nconst selectedUser = ref('')\nconst selectedVehicle = ref('')\n\nconst locations = ref([])\nconst users = ref([])\nconst vehicles = ref([])\nconst markers = ref(new Map())\nconst routes = ref(new Map())\n\nconst filteredLocations = computed(() => {\n  return locations.value.filter(location => {\n    const matchesUser = !selectedUser.value || \n      location.vehiculo?.asignacion_actual?.usuario_id == selectedUser.value\n    \n    const matchesVehicle = !selectedVehicle.value || \n      location.vehiculo_id == selectedVehicle.value\n    \n    return matchesUser && matchesVehicle\n  })\n})\n\nconst initMap = () => {\n  map.value = L.map('map').setView([19.432608, -99.133209], 10)\n  \n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '© OpenStreetMap contributors'\n  }).addTo(map.value)\n}\n\nconst initSocket = () => {\n  socket.value = io(import.meta.env.VITE_API_URL || 'http://localhost:8080')\n  \n  socket.value.on('location-update', (data) => {\n    updateVehicleLocation(data)\n  })\n  \n  socket.value.on('connect', () => {\n    console.log('Conectado al servidor de ubicaciones')\n  })\n  \n  socket.value.on('disconnect', () => {\n    console.log('Desconectado del servidor de ubicaciones')\n  })\n}\n\nconst fetchData = async () => {\n  try {\n    const [locationsRes, usersRes, vehiclesRes] = await Promise.all([\n      api.get('/ubicaciones/latest'),\n      api.get('/usuarios?rol=usuario&activo=true'),\n      api.get('/vehiculos?estado=asignado')\n    ])\n    \n    locations.value = locationsRes.data.data\n    users.value = usersRes.data.data\n    vehicles.value = vehiclesRes.data.data\n    \n    updateMapMarkers()\n  } catch (error) {\n    toast.error('Error al cargar las ubicaciones')\n  }\n}\n\nconst updateMapMarkers = () => {\n  // Limpiar marcadores existentes\n  markers.value.forEach(marker => {\n    map.value.removeLayer(marker)\n  })\n  markers.value.clear()\n\n  // Agregar nuevos marcadores\n  filteredLocations.value.forEach(location => {\n    const marker = L.marker([location.latitud, location.longitud])\n      .bindPopup(`\n        <div class=\"p-2\">\n          <h3 class=\"font-bold\">${location.vehiculo?.matricula}</h3>\n          <p>${location.vehiculo?.marca?.nombre} ${location.vehiculo?.modelo}</p>\n          <p><strong>Usuario:</strong> ${location.vehiculo?.asignacion_actual?.usuario_nombre || 'Sin asignar'}</p>\n          <p><strong>Velocidad:</strong> ${location.velocidad} km/h</p>\n          <p><strong>Dirección:</strong> ${location.direccion}°</p>\n          <p><strong>Actualizado:</strong> ${formatDate(location.timestamp_gps)}</p>\n        </div>\n      `)\n      .addTo(map.value)\n    \n    markers.value.set(location.vehiculo_id, marker)\n  })\n}\n\nconst updateVehicleLocation = (locationData) => {\n  // Actualizar en la lista de ubicaciones\n  const index = locations.value.findIndex(loc => loc.vehiculo_id === locationData.vehiculo_id)\n  if (index !== -1) {\n    locations.value[index] = locationData\n  } else {\n    locations.value.push(locationData)\n  }\n  \n  // Actualizar marcador en el mapa\n  const marker = markers.value.get(locationData.vehiculo_id)\n  if (marker) {\n    marker.setLatLng([locationData.latitud, locationData.longitud])\n    marker.getPopup().setContent(`\n      <div class=\"p-2\">\n        <h3 class=\"font-bold\">${locationData.vehiculo?.matricula}</h3>\n        <p>${locationData.vehiculo?.marca?.nombre} ${locationData.vehiculo?.modelo}</p>\n        <p><strong>Usuario:</strong> ${locationData.vehiculo?.asignacion_actual?.usuario_nombre || 'Sin asignar'}</p>\n        <p><strong>Velocidad:</strong> ${locationData.velocidad} km/h</p>\n        <p><strong>Dirección:</strong> ${locationData.direccion}°</p>\n        <p><strong>Actualizado:</strong> ${formatDate(locationData.timestamp_gps)}</p>\n      </div>\n    `)\n  }\n}\n\nconst refreshLocations = async () => {\n  await fetchData()\n  toast.success('Ubicaciones actualizadas')\n}\n\nconst toggleAutoRefresh = () => {\n  autoRefresh.value = !autoRefresh.value\n  if (autoRefresh.value) {\n    toast.success('Auto-actualización activada')\n  } else {\n    toast.info('Auto-actualización desactivada')\n  }\n}\n\nconst filterVehicles = () => {\n  updateMapMarkers()\n}\n\nconst focusVehicle = (location) => {\n  map.value.setView([location.latitud, location.longitud], 15)\n  const marker = markers.value.get(location.vehiculo_id)\n  if (marker) {\n    marker.openPopup()\n  }\n}\n\nconst centerMap = () => {\n  if (filteredLocations.value.length > 0) {\n    const group = new L.featureGroup(Array.from(markers.value.values()))\n    map.value.fitBounds(group.getBounds().pad(0.1))\n  } else {\n    map.value.setView([19.432608, -99.133209], 10)\n  }\n}\n\nconst getSpeedClass = (speed) => {\n  if (speed === 0) return 'bg-gray-100 text-gray-800'\n  if (speed <= 30) return 'bg-green-100 text-green-800'\n  if (speed <= 60) return 'bg-yellow-100 text-yellow-800'\n  return 'bg-red-100 text-red-800'\n}\n\nconst formatDate = (date) => {\n  return format(new Date(date), 'dd/MM/yyyy HH:mm:ss', { locale: es })\n}\n\nonMounted(async () => {\n  initMap()\n  initSocket()\n  await fetchData()\n})\n\nonUnmounted(() => {\n  if (socket.value) {\n    socket.value.disconnect()\n  }\n})\n</script>\n\n<style>\n@import 'leaflet/dist/leaflet.css';\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}